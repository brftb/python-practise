# -*- coding: utf-8 -*-
"""Untitled2-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DmK3ptxLB3RUc6Nq94UibVft7B3YNy7i
"""

word1 = 'hello'
print(word1)
print(type(word1))

word2 = '123'
print(word2)
print(type(word2))

word3 = str(45)
print(word3)
print(type(word3))

word4 = int('67')
print(word4)
print(type(word4))

word5 = float(89.10)
print(word5)
print(type(word5))

print(word1)
# 文字列の長さ
print(len(word1))
# インデックス
print(word1[1])
print(word1[-1])
#  h  e  l  l  o
#  0  1  2  3  4
# -5 -4 -3 -2 -1

# 文字列のスライス
digits1 = '0123456789'
print(digits1[1:4]) # 最初のインデックスと最後のインデックス＋１
print(digits1[:4]) # 0は省略可能
print(digits1[5:]) # 末尾も省略可能
print(digits1[-4:-1]) # 末尾からも選択できる
print(digits1[3:9:2]) # 第3引数おきに切り取り
print(digits1[8:4:-1]) # 逆向きの文字列を切り取り

# 空文字列（くうもじれつ）
blank = ''
price = '2,980円'
print(price.replace(',', blank))

# 変な文字列スライスをするとNoneではなく空文字列が返される
digits1 = '0123456789'
print('this', digits1[4:1], '<-')
print('isn`t', digits1[-1:-4])
print('None', digits1[3:3])
print('これは正常', digits1[3:-1])

# 文字列検索
print('ll' in 'hello')
print('z' in 'hello')
print('z' not in 'hello')

# エスケープシーケンス
escape = 'this is \'MINE\''
print(escape)
escape2 = "hello 'JAPAN'"
print(escape2)
escape3 = "text123\ntext234"
print(escape3)
escape4 = "hahaha\\aiueo"
print(escape4)
escape5 = '''シングル
クォート\\３連は特殊'''
print(escape5)

# 文字列連結
word1 = 'aho'
word2 = 'ge'
text1 = word1 + word2
print(text1)
print(word1 + text1*2)

# 文字列置換
word3 = 'hello'
print(word3.replace('l','123'))
print(word3)

# 練習
def remove_punctuations(str_engsentences):
  answer = str_engsentences.replace('.','')
  answer = answer.replace(',','')
  answer = answer.replace(':','')
  answer = answer.replace(';','')
  answer = answer.replace('!','')
  answer = answer.replace('?','')
  return answer
print(remove_punctuations('Quiet, uh, donations, you want me to make a donation to the coast guard youth auxiliary?') == 
      'Quiet uh donations you want me to make a donation to the coast guard youth auxiliary')

# 練習
def atgc_bppair(str_atgc):
    str_pair = str_atgc.replace('A', 't') # 指定の文字に置換。ただし全て小文字
    str_pair = str_pair.replace('T', 'a')
    str_pair = str_pair.replace('G', 'c')
    str_pair = str_pair.replace('C', 'g')
    str_pair = str_pair.upper() # 置換済みの小文字の列を大文字に変換
    return str_pair
print(atgc_bppair('AAGCCCCATGGTAA'))

# 文字列検索2
word1 = 'hello'
print(word1.index('l'))
print(word1.index('lo'))
# print(word1.index('a')) # 存在しなければエラー
print(word1.find('a')) # こっちは-1

# 練習
def swap_colon(str1):
  i = str1.index(':')
  str2, str3 = str1[:i], str1[i+1:] # まとめられる
  return str3 + ':' + str2
print(swap_colon('hello:world') == 'world:hello')

# 数え上げ
word1 = 'hello'
print(word1.count('l'))
print('aaaaaaaaa'.count('aaa'))
print('aaaaaaaaa'.count('aa'))

# 練習
def atgc_count(str_atgc, str_bpname):
  return str_atgc.count(str_bpname)
print(atgc_count('AAGCCCCATGGTAA', 'A') == 5)

# 大文字・小文字
upper_dna = 'DNA'
print(upper_dna.lower()) # 全ての文字を小文字にする
lower_text = 'hello world!'
print(lower_text.upper()) #全ての文字を大文字にする
print(lower_text.capitalize()) # 先頭文字を大文字にする

# 空白文字の削除
# 文字列の前後に存在する諸々を削除
print('  abc\n'.strip())
print('　a b c　\t'.strip())
print('  abc\n'.lstrip()) # 左側のみ削除
print('  abc\n'.rstrip()) # 右側のみ削除

# 文字列の比較演算
print('abc' == 'abc')
print('ab' == 'abc')
print(int('123') == str('123'))
print('abc' <= 'abc')
print('abc' < 'ad') # いわゆる辞書式による比較
print('ab' < 'abc')

# 練習
def check_lower(str_engsentences):
  return str_engsentences == str_engsentences.lower()
print(check_lower('down down down') == True)
print(check_lower('There were doors all round the hall, but they were all locked') == False)

# 練習
def remove_clause(str_engsentences):
  i = str_engsentences.index(',')
  return str_engsentences[i+1:].lstrip().capitalize()
print(remove_clause("It's being seen, but you aren't observing.") == "But you aren't observing.")

